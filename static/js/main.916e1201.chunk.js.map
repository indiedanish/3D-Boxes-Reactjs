{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["PhyPlane","color","props","usePlane","ref","args","PhyBox","useBox","mass","api","onClick","applyImpulse","App","camera","position","near","far","gravity","niceColors","rotation","Math","PI","intensity","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oNAAe,I,yDCWf,SAASA,EAAT,GAAwC,IAApBC,EAAmB,EAAnBA,MAAUC,EAAS,iBACrC,EAAcC,aAAS,iCAAYD,MAA5BE,EAAP,oBAEA,OACI,cAAC,IAAD,CAAOC,KAAM,CAAC,IAAM,KAAOD,IAAKA,EAAhC,SACE,sCAAsBH,MAAOA,MAWrC,SAASK,EAAOJ,GACd,MAAmBK,aAAO,+BAASF,KAAM,CAAC,EAAG,EAAG,GAAIG,KAAM,GAAMN,MAAhE,mBAAOE,EAAP,KAAYK,EAAZ,KAEA,OACI,cAAC,IAAD,CACIJ,KAAM,CAAC,EAAG,EAAG,GACbD,IAAKA,EACLM,QAAS,kBAGLD,EAAIE,aAAa,CAAC,EAAG,GAAI,IAAK,CAAC,EAAG,EAAG,KAN7C,SAeE,yCA8COC,MAvCf,WACE,OAGF,eAAC,IAAD,CAAQC,OAAQ,CAAEC,SAAU,CAAC,EAAG,EAAG,GAAIC,KAAM,GAAKC,IAAK,KAAvD,UAKA,eAAC,IAAD,CAASC,QAAS,CAAC,GAAI,EAAG,GAA1B,UACI,cAACjB,EAAD,CACIC,MAAOiB,EAAW,IAAI,GACtBJ,SAAU,CAAC,GAAI,EAAG,GAClBK,SAAU,EAAEC,KAAKC,GAAK,EAAG,EAAG,KAEhC,cAACrB,EAAD,CAAUC,MAAOiB,EAAW,IAAI,GAAIJ,SAAU,CAAC,EAAG,GAAI,MACtD,cAACd,EAAD,CAAUC,MAAOiB,EAAW,IAAI,GAAIJ,SAAU,EAAE,EAAG,GAAI,IAAKK,SAAU,CAAC,EAAG,EAAG,KAC7E,cAACnB,EAAD,CAAUC,MAAOiB,EAAW,IAAI,GAAIJ,SAAU,CAAC,EAAG,GAAI,IAAKK,SAAU,CAAC,GAAI,EAAG,KARjF,6EAWI,cAACb,EAAD,CAAQQ,SAAU,CAAC,EAAG,GAAI,KAC1B,cAACR,EAAD,CAAQQ,SAAU,CAAC,EAAG,GAAI,KAC1B,cAACR,EAAD,CAAQQ,SAAU,EAAE,EAAG,GAAI,QAlB/B,4DAsBA,8BAAcQ,UAAW,KAtBzB,+DAyBA,4BAAYA,UAAW,EAAGR,SAAU,CAAC,EAAG,EAAG,KAzB3C,kFC7CeS,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.916e1201.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\nimport * as THREE from 'three'\nimport { Box, Plane } from \"@react-three/drei\";\nimport React, { Suspense, useMemo }  from \"react\";\nimport { Canvas, useLoader } from \"react-three-fiber\";\nimport { Physics, useBox, usePlane, useSphere } from \"@react-three/cannon\";\nimport niceColors from 'nice-color-palettes';\nimport \"./index.css\";\n\n\nfunction PhyPlane({ color, ...props }) {\n  const [ref] = usePlane(() => ({ ...props }));\n\n  return (\n      <Plane args={[1000, 1000]} ref={ref}>\n        <meshStandardMaterial color={color} />\n      </Plane>\n  );\n}\n\n\n// It has a mass so that it will always be under a gravitational effect to fall\n// We have put in some trigger events which will cause some action to occur; that is on-click\n// They shall be built out of a mesh material\n\n\nfunction PhyBox(props) {\n  const [ref, api] = useBox(() => ({ args: [1, 1, 1], mass: 1, ...props }));\n\n  return (\n      <Box\n          args={[1, 1, 1]}\n          ref={ref}\n          onClick={() =>\n\n              // This shoots the object when clicked on\n              api.applyImpulse([0, 5, -10], [0, 0, 0])\n              // &&\n\n              // This makes the object fly upwards when clicked on\n\n              // api.velocity.set(0, 2, 0)\n\n          }\n      >\n        <meshNormalMaterial />\n      </Box>\n  );\n}\n\n\n\nfunction App() {\n  return (\n\n\n<Canvas camera={{ position: [0, 0, 0], near: 0.1, far: 1000 }}>\n\n  \n\n\n<Physics gravity={[0, -5, 0]}>\n    <PhyPlane\n        color={niceColors[17][5]}\n        position={[0, -2, 0]}\n        rotation={[-Math.PI / 2, 0, 0]}\n    />\n    <PhyPlane color={niceColors[17][2]} position={[0, 0, -10]} />\n    <PhyPlane color={niceColors[17][3]} position={[-6, 0, -10]} rotation={[0, 2, 0]} />\n    <PhyPlane color={niceColors[17][1]} position={[6, 0, -10]} rotation={[0, -2, 0]} />\n\n    // Three objects are placed in different positions in the x, y, and z axis\n    <PhyBox position={[2, 0, -5]} />\n    <PhyBox position={[0, 0, -5]} />\n    <PhyBox position={[-2, 0, -5]} />\n</Physics>\n\n// This is for provision of ambient lighting in the scene\n<ambientLight intensity={0.3} />\n\n// We have added some pointLight here at the position showed\n<pointLight intensity={2} position={[5, 0, 5]} />\n\n// Apart from ambient light and point light, you can add others such as fog\n</Canvas>\n\n\n\n  );\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}